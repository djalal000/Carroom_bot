name: Deploy Telegram Bot to AWS ECS
on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 813010034876.dkr.ecr.us-east-1.amazonaws.com/telegram-bot
  ECS_CLUSTER: telegram-bot-cluster
  ECS_SERVICE: telegram-bot-service
  TASK_FAMILY: telegram-bot-task

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # needed for OIDC auth (optional if using keys)

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure AWS credentials (access-key or OIDC)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Image tag = short commit SHA
      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # 5. Build & tag
      - name: Build Docker image
        run: |
          docker build -t telegram-bot .
          docker tag telegram-bot:latest ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker tag telegram-bot:latest ${{ env.ECR_REPOSITORY }}:latest

      # 6. Push both tags
      - name: Push Docker image
        run: |
          docker push ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REPOSITORY }}:latest

      # 7. Generate task-definition JSON (unique env vars â†’ new revision)
      - name: Generate task definition
        run: |
          cat > task-def.json <<'EOF'
          {
            "family": "${{ env.TASK_FAMILY }}",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "1024",
            "executionRoleArn": "arn:aws:iam::813010034876:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "telegram-bot",
                "image": "${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
                "essential": true,
                "environment": [
                  { "name": "GIT_COMMIT", "value": "${{ env.IMAGE_TAG }}" },
                  { "name": "DEPLOYED_AT", "value": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" }
                ],
                "environmentFiles": [
                  { "value": "arn:aws:s3:::telegram-bot-env/.env", "type": "s3" }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/telegram-bot",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF

      # 8. Register a NEW task-definition revision
      - name: Register ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-register-task-definition@v1   # correct name
        with:
          task-definition: task-def.json

      # 9. Deploy (force new deployment)
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition-arn }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
          force-new-deployment: true
