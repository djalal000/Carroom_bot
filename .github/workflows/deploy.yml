name: Docker Build, Scan & Deploy to ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 813010034876.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: telegram-bot
  IMAGE_TAG: ${{ github.sha }}
  ECS_CLUSTER: telegram-bot-cluster       # ‚ö†Ô∏è REPLACE WITH YOUR CLUSTER NAME
  ECS_SERVICE: telegram-bot-service        # ‚ö†Ô∏è REPLACE WITH YOUR SERVICE NAME
  ECS_TASK_DEFINITION: telegram-bot-task    # ‚ö†Ô∏è REPLACE WITH YOUR TASK DEFINITION NAME

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      # ---------------------------
      # 1Ô∏è‚É£ Checkout repository
      # ---------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------------------------
      # 2Ô∏è‚É£ Configure AWS credentials
      # ---------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: ${{ env.AWS_REGION }}

      # ---------------------------
      # 3Ô∏è‚É£ Log in to Amazon ECR
      # ---------------------------
      - name: Docker Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      # ---------------------------
      # 4Ô∏è‚É£ Build Docker image
      # ---------------------------
      - name: Build Docker image
        run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      # ---------------------------
      # 5Ô∏è‚É£ Scan Docker image with Trivy
      # ---------------------------
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

      # ---------------------------
      # 6Ô∏è‚É£ Push Docker image to ECR (with commit SHA)
      # ---------------------------
      - name: Push Docker image to ECR
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # ---------------------------
      # 7Ô∏è‚É£ Tag and push as 'latest'
      # ---------------------------
      - name: Tag and push as latest
        run: |
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # ---------------------------
      # 8Ô∏è‚É£ Download current task definition
      # ---------------------------
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION \
            --query taskDefinition > task-definition.json

      # ---------------------------
      # 9Ô∏è‚É£ Update task definition with new image
      # ---------------------------
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update task definition with new image
        run: |
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE | 
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-definition.json > new-task-definition.json

      # ---------------------------
      # üîü Register new task definition
      # ---------------------------
      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "‚úÖ Registered new task definition: $TASK_DEF_ARN"

      # ---------------------------
      # 1Ô∏è‚É£1Ô∏è‚É£ Update ECS service with new task definition
      # ---------------------------
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition ${{ steps.register-task-def.outputs.task_def_arn }} \
            --force-new-deployment \
            --region $AWS_REGION
          echo "‚úÖ ECS service updated successfully"

      # ---------------------------
      # 1Ô∏è‚É£2Ô∏è‚É£ Wait for service stability (optional)
      # ---------------------------
      - name: Wait for service stability
        run: |
          echo "‚è≥ Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region $AWS_REGION
          echo "‚úÖ ECS service is now stable"
