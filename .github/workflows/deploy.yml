name: Deploy Telegram Bot to AWS ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 813010034876.dkr.ecr.us-east-1.amazonaws.com/telegram-bot
  ECS_CLUSTER: telegram-bot-cluster
  ECS_SERVICE: telegram-bot-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: ${{ env.AWS_REGION }}

      # 3️⃣ Log in to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 4️⃣ Set IMAGE_TAG (unique tag from commit)
      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # 5️⃣ Build Docker image (no cache)
      - name: Build Docker image (no cache)
        run: |
          docker build --no-cache -t telegram-bot .
          docker tag telegram-bot:latest $ECR_REPOSITORY:${{ env.IMAGE_TAG }}

      # 6️⃣ Push Docker image to ECR
      - name: Push Docker image
        run: docker push $ECR_REPOSITORY:${{ env.IMAGE_TAG }}

      # 7️⃣ Register new ECS task definition revision
      - name: Register new ECS task definition
        id: register-task
        run: |
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition telegram-bot-task \
            --query taskDefinition)
          
          NEW_TASK_DEF=$(echo "$TASK_DEF" | \
            jq --arg IMAGE "$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          
          echo "$NEW_TASK_DEF" > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json
          
          echo "TASK_FAMILY=$(echo $NEW_TASK_DEF | jq -r '.family')" >> $GITHUB_ENV

      # 8️⃣ Deploy new task definition
      - name: Update ECS service with new task definition
        run: |
          LATEST_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_FAMILY }} \
            --query "taskDefinition.revision" --output text)
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition ${TASK_FAMILY}:${LATEST_TASK_DEF} \
            --force-new-deployment

      # 9️⃣ Wait until new service is stable
      - name: Wait for ECS service to stabilize
        run: |
          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE
          echo "✅ Deployment complete!"
