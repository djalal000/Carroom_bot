name: Deploy Telegram Bot to AWS ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 813010034876.dkr.ecr.us-east-1.amazonaws.com/telegram-bot
  ECS_CLUSTER: telegram-bot-cluster
  ECS_SERVICE: telegram-bot-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: ${{ env.AWS_REGION }}

      # 3️⃣ Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4️⃣ Set IMAGE_TAG environment variable from git commit SHA
      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # 5️⃣ Build Docker image
      - name: Build Docker image
        run: |
          docker build -t telegram-bot .
          docker tag telegram-bot:latest $ECR_REPOSITORY:${{ env.IMAGE_TAG }}

      # 6️⃣ Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REPOSITORY:${{ env.IMAGE_TAG }}

      # 7️⃣ Scan image for vulnerabilities with Trivy
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

      # 8️⃣ Create ECS task definition
      - name: Create ECS task definition
        id: taskdef
        run: |
          echo '{
            "family": "telegram-bot-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::813010034876:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "telegram-bot",
                "image": "'$ECR_REPOSITORY':${{ env.IMAGE_TAG }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80,
                    "protocol": "tcp"
                  }
                ],
                "environmentFiles": [
                  {
                    "value": "arn:aws:s3:::telegram-bot-env/.env",
                    "type": "s3"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/telegram-bot",
                    "awslogs-region": "us-east-1",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }' > task-def.json

      # 9️⃣ Deploy to ECS (force new deployment)
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-def.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
          force-new-deployment: true
